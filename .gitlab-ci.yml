stages:
  - prepare
  - lint
  - sast
  - deps
  - secrets
  - test
  - build
  - container_scan
  - sbom
  - publish

default:
  image: python:3.13-slim
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .cache/pip

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_PYTHON_VERSION_WARNING: "1"

# ---------- Lint & Types ----------
lint:ruff:
  stage: lint
  script:
    - pip install ruff
    - ruff check .
    - ruff format --check .
  artifacts:
    when: always
    expire_in: 7 days
  rules:
    - when: always

types:mypy:
  stage: lint
  script:
    - pip install mypy
    - pip install -e .
    - mypy ids_iforest_package
  rules:
    - when: always

# ---------- SAST ----------
sast:bandit:
  stage: sast
  script:
    - pip install bandit
    - bandit -r ids_iforest_package -x tests -f sarif -o bandit.sarif
  artifacts:
    when: always
    expire_in: 14 days
    paths: [bandit.sarif]
  rules:
    - when: always

sast:semgrep:
  stage: sast
  script:
    - pip install semgrep
    # Use community CI rules and fail the job on findings
    - semgrep scan --config p/ci --error --metrics=off --timeout 1800
  rules:
    - when: always

# ---------- Dependencies ----------
deps:pip-audit:
  stage: deps
  script:
    - python -m pip install --upgrade pip
    - pip install -e .
    - pip install pip-audit
    # Audit the installed environment; job fails (exit=1) if vulns found
    - pip-audit
  rules:
    - when: always

# ---------- Secrets ----------
secrets:gitleaks:
  stage: secrets
  image:
    name: zricethezav/gitleaks:latest
    entrypoint: [""]
  script:
    # scan full git history; fail on findings; redact output
    - gitleaks git --redact --exit-code 1 --report-format sarif --report-path gitleaks.sarif
  artifacts:
    when: always
    expire_in: 14 days
    paths: [gitleaks.sarif]
  rules:
    - when: always

# ---------- Tests ----------
test:pytest:
  stage: test
  script:
    - pip install -e .
    - pip install pytest pytest-cov
    - >
      pytest -q --maxfail=1 --disable-warnings
      --cov=ids_iforest_package --cov-report=xml --cov-report=term-missing
      --cov-fail-under=75
  artifacts:
    when: always
    expire_in: 14 days
    paths: [coverage.xml, .pytest_cache/]
  rules:
    - when: always

# ---------- Build container images ----------
.build_docker_template: &build_docker
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_DRIVER: overlay2
  before_script:
    # Login with GitLab-provided per-job credentials
    - echo "$CI_REGISTRY_PASSWORD" | docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" --password-stdin
  artifacts:
    when: always
    expire_in: 14 days
    paths: [images.txt]

build:images:
  <<: *build_docker
  stage: build
  script:
    - export SHA_TAG="${CI_COMMIT_SHORT_SHA}"
    - docker build --pull -f docker/ids_iforest/Dockerfile -t "$CI_REGISTRY_IMAGE/ids:$SHA_TAG" .
    - docker push "$CI_REGISTRY_IMAGE/ids:$SHA_TAG"
    - docker build --pull -f docker/malicious_sender/Dockerfile -t "$CI_REGISTRY_IMAGE/malicious_sender:$SHA_TAG" .
    - docker push "$CI_REGISTRY_IMAGE/malicious_sender:$SHA_TAG"
    - docker build --pull -f docker/web_app/Dockerfile -t "$CI_REGISTRY_IMAGE/web_app:$SHA_TAG" .
    - docker push "$CI_REGISTRY_IMAGE/web_app:$SHA_TAG"
    - printf "%s\n%s\n%s\n" \
        "$CI_REGISTRY_IMAGE/ids:$SHA_TAG" \
        "$CI_REGISTRY_IMAGE/malicious_sender:$SHA_TAG" \
        "$CI_REGISTRY_IMAGE/web_app:$SHA_TAG" > images.txt
  rules:
    - when: always

# ---------- Container image scanning ----------
scan:trivy:
  stage: container_scan
  image:
    name: docker.io/aquasec/trivy:latest
    entrypoint: [""]
  variables:
    TRIVY_NO_PROGRESS: "true"
    TRIVY_CACHE_DIR: ".trivycache/"
    # allow trivy to auth to GitLab Container Registry:
    TRIVY_USERNAME: "$CI_REGISTRY_USER"
    TRIVY_PASSWORD: "$CI_REGISTRY_PASSWORD"
  script:
    - |
      set -euo pipefail
      while IFS= read -r IMG; do
        echo "Scanning $IMG"
        trivy image --exit-code 0 "$IMG"      # full report in logs
        trivy image --exit-code 1 --severity HIGH,CRITICAL "$IMG"
      done < images.txt
  cache:
    paths: [.trivycache/]
  needs: ["build:images"]
  rules:
    - when: always

# ---------- SBOMs ----------
sbom:syft:
  stage: sbom
  image:
    name: anchore/syft:latest
    entrypoint: [""]
  variables:
    DOCKER_CONFIG: "$CI_PROJECT_DIR/.docker"
  script:
    - mkdir -p sbom "$DOCKER_CONFIG"
    # minimal docker auth config for registry pulls (no docker daemon required)
    - >
      cat > "$DOCKER_CONFIG/config.json" <<EOF
      {"auths":{"$CI_REGISTRY":{"username":"$CI_REGISTRY_USER","password":"$CI_REGISTRY_PASSWORD"}}}
      EOF
    - |
      set -euo pipefail
      while IFS= read -r IMG; do
        BASENAME=$(echo "$IMG" | tr "/:" "__")
        syft "registry:$IMG" -o cyclonedx-json > "sbom/${BASENAME}.cdx.json"
      done < images.txt
  artifacts:
    when: always
    expire_in: 3 months
    paths: [sbom/]
  needs: ["build:images"]
  rules:
    - when: always

# ---------- Publish (only on tags v*) ----------
publish:docker:
  <<: *build_docker
  stage: publish
  script:
    - test -n "$CI_COMMIT_TAG"
    - VERSION="${CI_COMMIT_TAG#v}"
    - |
      set -euo pipefail
      while IFS= read -r IMG; do
        BASE="${IMG%:*}"
        docker pull "$IMG"
        docker tag "$IMG" "$BASE:$VERSION"
        docker push "$BASE:$VERSION"
      done < images.txt
  needs: ["build:images"]
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+/'
      when: on_success

publish:pypi:
  stage: publish
  image: python:3.13-slim
  variables:
    TWINE_USERNAME: "__token__"
    TWINE_PASSWORD: "$PYPI_API_TOKEN"
  script:
    - python -m pip install --upgrade pip
    - pip install build twine
    - python -m build
    - twine upload dist/*
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+/'
      when: on_success
