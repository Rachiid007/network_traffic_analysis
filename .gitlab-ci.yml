# Security analyzers
include:
  - template: Security/SAST.gitlab-ci.yml             # Bandit/Semgrep for Python
  - template: Security/Secret-Detection.gitlab-ci.yml # Gitleaks-style secret scanning

stages:
  - test
  - build
  - scan
  - deploy

# ---------- Global settings ----------
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip-cache"
  DOCKER_DRIVER: overlay2

cache:
  key: "pip-cache"
  paths:
    - .pip-cache/

# ---------- 1) TEST ----------
unit_tests:
  stage: test
  image: python:3.12-slim
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  before_script:
    - python -m pip install --upgrade pip
    # Install your package with its test extras (pytest, pytest-cov, etc.)
    - pip install -e "ids_iforest_package[test]"
  script:
    - cd ids_iforest_package
    # IMPORTANT: explicitly specify the coverage target and write artifacts to repo root
    - pytest -q --cov=ids_iforest --cov-report=xml:../coverage.xml --cov-report=html:../htmlcov
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage.xml
      - htmlcov/
    expire_in: 1 week

# NOTE:
# SAST + Secret Detection jobs from the templates run in the "test" stage automatically.

# ---------- Reusable anchor for docker build jobs ----------
.docker-build-template: &docker_build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    # Auth to GitLab Container Registry using built-in CI variables
    - echo "$CI_REGISTRY_PASSWORD" | docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" --password-stdin
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

# ---------- 2) BUILD ----------
# attacker: context is ./services/attacker (Dockerfile lives there)
build_attacker:
  stage: build
  <<: *docker_build
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE/attacker:${CI_COMMIT_SHORT_SHA}" services/attacker
    - docker push "$CI_REGISTRY_IMAGE/attacker:${CI_COMMIT_SHORT_SHA}"

# ids: Dockerfile needs repo-root context (see docker-compose.yml)
build_ids:
  stage: build
  <<: *docker_build
  script:
    - docker build --pull -f services/ids/Dockerfile -t "$CI_REGISTRY_IMAGE/ids:${CI_COMMIT_SHORT_SHA}" .
    - docker push "$CI_REGISTRY_IMAGE/ids:${CI_COMMIT_SHORT_SHA}"

# web: context is ./services/web
build_web:
  stage: build
  <<: *docker_build
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE/web:${CI_COMMIT_SHORT_SHA}" services/web
    - docker push "$CI_REGISTRY_IMAGE/web:${CI_COMMIT_SHORT_SHA}"

# ---------- 3) SCAN (DevSecOps) ----------
dependency_scan:
  stage: scan
  image: python:3.12-slim
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  before_script:
    - python -m pip install --upgrade pip
    - pip install pip-audit
    - pip install -e ids_iforest_package/
  script:
    - pip-audit
  allow_failure: true  # flip to false if you want to enforce strict blocking

# Trivy image scan for each built image (pulls from GitLab registry)
scan_images:
  stage: scan
  image:
    name: aquasec/trivy:latest
    entrypoint: [""]      # <-- unset ENTRYPOINT so GitLab can run the shell script
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  script:
    - |
      for s in attacker ids web; do
        echo "Scanning $CI_REGISTRY_IMAGE/$s:${CI_COMMIT_SHORT_SHA}"
        trivy image \
          --username "$CI_REGISTRY_USER" \
          --password "$CI_REGISTRY_PASSWORD" \
          --no-progress \
          --ignore-unfixed \
          --severity HIGH,CRITICAL \
          --exit-code 1 \
          --timeout 10m \
          "$CI_REGISTRY_IMAGE/$s:${CI_COMMIT_SHORT_SHA}"
      done
  allow_failure: true     # flip to false to enforce blocking on HIGH/CRITICAL

# ---------- 4) DEPLOY (PyPI) ----------
publish_to_pypi:
  stage: deploy
  image: python:3.12-slim
  rules:
    - if: '$CI_COMMIT_TAG'
  variables:
    PIP_DISABLE_PIP_VERSION_CHECK: "1"
  before_script:
    - python -m pip install --upgrade pip
    - pip install build twine
  script:
    - cd ids_iforest_package
    - python -m build
    - twine upload dist/* -u "$PYPI_USERNAME" -p "$PYPI_PASSWORD"
